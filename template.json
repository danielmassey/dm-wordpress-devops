{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Daniel Massey - AWS CloudFormation template to build HA scalable WordPress App",

  "Parameters" : {
    "QAType" : {
      "Description" : "QA jumpbox EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "WebServerInstanceType" : {
      "Description" : "WebServer EC2 instance type for auto scaling group",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "DBName": {
      "Description" : "The name to use for the database",
      "Type": "String",
      "Default" : "Onica"
    },
    "DBUser": {
      "Description" : "User Name for the database",
      "Type": "String",
      "Default" : "Admin"
    },
    "DBPass": {
      "Description" : "Password for the database user",
      "Type": "String",
      "Default" : "Password",
      "MinLength": "8",
      "ConstraintDescription": "must be 8 or more characters long"
    },
    "Email": {
      "Description" : "Email address to send emails to",
      "Type": "String",
      "Default" : "danielmassey1@gmail.com",
      "ConstraintDescription": "must be a valid email"
    },
    "SSHLocation" : {
      "Description" : "The office gateway IP address to allow SSH to the EC2 QA instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
    "Region2Examples" : {
      "us-east-1"      : { "Examples" : "https://s3.amazonaws.com/cloudformation-examples-us-east-1" },
      "us-west-2"      : { "Examples" : "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2" },
      "us-west-1"      : { "Examples" : "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1" },
      "eu-west-1"      : { "Examples" : "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1" },
      "eu-west-2"      : { "Examples" : "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2" },
      "eu-west-3"      : { "Examples" : "https://s3-eu-west-3.amazonaws.com/cloudformation-examples-eu-west-3" },
      "eu-central-1"   : { "Examples" : "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1" },
      "ap-southeast-1" : { "Examples" : "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1" },
      "ap-northeast-1" : { "Examples" : "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1" },
      "ap-northeast-2" : { "Examples" : "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2" },
      "ap-northeast-3" : { "Examples" : "https://s3-ap-northeast-3.amazonaws.com/cloudformation-examples-ap-northeast-3" },
      "ap-southeast-2" : { "Examples" : "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2" },
      "ap-south-1"     : { "Examples" : "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1" },
      "us-east-2"      : { "Examples" : "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2" },
      "ca-central-1"   : { "Examples" : "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1" },
      "sa-east-1"      : { "Examples" : "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1" },
      "cn-north-1"     : { "Examples" : "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1" },
      "cn-northwest-1" : { "Examples" : "https://s3.cn-northwest-1.amazonaws.com.cn/cloudformation-examples-cn-northwest-1" }
    }
,
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "HVM64"  },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "HVM64"  },
      "m1.medium"   : { "Arch" : "HVM64"  },
      "m1.large"    : { "Arch" : "HVM64"  },
      "m1.xlarge"   : { "Arch" : "HVM64"  },
      "m2.xlarge"   : { "Arch" : "HVM64"  },
      "m2.2xlarge"  : { "Arch" : "HVM64"  },
      "m2.4xlarge"  : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "HVM64"  },
      "c1.xlarge"   : { "Arch" : "HVM64"  },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATHVM64"  },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "m1.small"    : { "Arch" : "NATHVM64"  },
      "m1.medium"   : { "Arch" : "NATHVM64"  },
      "m1.large"    : { "Arch" : "NATHVM64"  },
      "m1.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m3.medium"   : { "Arch" : "NATHVM64"  },
      "m3.large"    : { "Arch" : "NATHVM64"  },
      "m3.xlarge"   : { "Arch" : "NATHVM64"  },
      "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.large"    : { "Arch" : "NATHVM64"  },
      "m4.xlarge"   : { "Arch" : "NATHVM64"  },
      "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.10xlarge" : { "Arch" : "NATHVM64"  },
      "c1.medium"   : { "Arch" : "NATHVM64"  },
      "c1.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.large"    : { "Arch" : "NATHVM64"  },
      "c3.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.large"    : { "Arch" : "NATHVM64"  },
      "c4.xlarge"   : { "Arch" : "NATHVM64"  },
      "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
      "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
      "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
      "r3.large"    : { "Arch" : "NATHVM64"  },
      "r3.xlarge"   : { "Arch" : "NATHVM64"  },
      "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.xlarge"   : { "Arch" : "NATHVM64"  },
      "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.xlarge"   : { "Arch" : "NATHVM64"  },
      "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
      "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"HVM64" : "ami-0ff8a91507f77f867", "HVMG2" : "ami-0a584ac55a7631c0c"},
      "us-west-2"        : {"HVM64" : "ami-a0cfeed8", "HVMG2" : "ami-0e09505bc235aa82d"},
      "us-west-1"        : {"HVM64" : "ami-0bdb828fd58c52235", "HVMG2" : "ami-066ee5fd4a9ef77f1"},
      "eu-west-1"        : {"HVM64" : "ami-047bb4163c506cd98", "HVMG2" : "ami-0a7c483d527806435"},
      "eu-west-2"        : {"HVM64" : "ami-f976839e", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-3"        : {"HVM64" : "ami-0ebc281c20e89ba4b", "HVMG2" : "NOT_SUPPORTED"},
      "eu-central-1"     : {"HVM64" : "ami-0233214e13e500f77", "HVMG2" : "ami-06223d46a6d0661c7"},
      "ap-northeast-1"   : {"HVM64" : "ami-06cd52961ce9f0d85", "HVMG2" : "ami-053cdd503598e4a9d"},
      "ap-northeast-2"   : {"HVM64" : "ami-0a10b2721688ce9d2", "HVMG2" : "NOT_SUPPORTED"},
      "ap-northeast-3"   : {"HVM64" : "ami-0d98120a9fb693f07", "HVMG2" : "NOT_SUPPORTED"},
      "ap-southeast-1"   : {"HVM64" : "ami-08569b978cc4dfa10", "HVMG2" : "ami-0be9df32ae9f92309"},
      "ap-southeast-2"   : {"HVM64" : "ami-09b42976632b27e9b", "HVMG2" : "ami-0a9ce9fecc3d1daf8"},
      "ap-south-1"       : {"HVM64" : "ami-0912f71e06545ad88", "HVMG2" : "ami-097b15e89dbdcfcf4"},
      "us-east-2"        : {"HVM64" : "ami-0b59bfac6be064b78", "HVMG2" : "NOT_SUPPORTED"},
      "ca-central-1"     : {"HVM64" : "ami-0b18956f", "HVMG2" : "NOT_SUPPORTED"},
      "sa-east-1"        : {"HVM64" : "ami-07b14488da8ea02a0", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"HVM64" : "ami-0a4eaf6c4454eda75", "HVMG2" : "NOT_SUPPORTED"},
      "cn-northwest-1"   : {"HVM64" : "ami-6b6a7d09", "HVMG2" : "NOT_SUPPORTED"}
    }

  },
  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsHostnames" : true,
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "onica-VPC" } ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },
    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "SubnetPublic01" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.21.0/24",
        "AvailabilityZone" : "us-east-1a",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "public01" } ]
      }
    },
    "SubnetPublic02" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.22.0/24",
        "AvailabilityZone" : "us-east-1b",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "public02" } ]
      }
    },
    "SubnetPrivate01" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.23.0/24",
        "AvailabilityZone" : "us-east-1a",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "private01" } ]
      }
    },
    "SubnetPrivate02" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.24.0/24",
        "AvailabilityZone" : "us-east-1b",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "private02" } ]
      }
    },
    "ElasticIP01" : {
     "Type" : "AWS::EC2::EIP",
     "Properties" : {
        "Domain" : "vpc"     }
   },
    "NatGateway01" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "AllocationId" : {
            "Fn::GetAtt" : ["ElasticIP01", "AllocationId"]
          },
        "SubnetId" : { "Ref" : "SubnetPublic01" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "NAT01" } ]
      }
    },
    "ElasticIP02" : {
     "Type" : "AWS::EC2::EIP",
     "Properties" : {
        "Domain" : "vpc"   }
     },
    "NatGateway02" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "AllocationId" : {
            "Fn::GetAtt" : ["ElasticIP02", "AllocationId"]
          },
        "SubnetId" : { "Ref" : "SubnetPublic02" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "NAT02" } ]
      }
    },

    "RouteTableWAN" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "WAN Route" } ]
      }
    },
    "RouteWAN" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableWAN" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "SubnetRouteTableAssociationPub01" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic01" },
        "RouteTableId" : { "Ref" : "RouteTableWAN" }
      }
    },
    "SubnetRouteTableAssociationPub02" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic02" },
        "RouteTableId" : { "Ref" : "RouteTableWAN" }
      }
    },

    "RouteTableNAT01" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }, {"Key" : "Name", "Value" : "Private01 NAT01" } ]
      }
    },
    "RouteNAT01" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "NatGateway01",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableNAT01" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway01" }
      }
    },
    "SubnetRouteTableAssociationPriv01" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate01" },
        "RouteTableId" : { "Ref" : "RouteTableNAT01" }
      }
    },
    "RouteTableNAT02" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "Private02 NAT02" }
        ]
      }
    },
    "RouteNAT02" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "NatGateway02",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableNAT02" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway02" }
      }
    },
    "SubnetRouteTableAssociationPriv02" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate02" },
        "RouteTableId" : { "Ref" : "RouteTableNAT02" }
      }
    },

    "NetworkAclWAN" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "WAN ACL" }
        ]
      }
    },
    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclWAN"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic01" },
        "NetworkAclId" : { "Ref" : "NetworkAclWAN" }
      }
    },
    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic02" },
        "NetworkAclId" : { "Ref" : "NetworkAclWAN" }
      }
    },

    "NetworkAclPrivate" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Name", "Value" : "Private ACL" }
        ]
      }
    },
    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "22", "To" : "22"}
      }
    },
    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
    "OutBoundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    "OutBoundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "443", "To" : "443"}
      }
    },
    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclPrivate"},
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrvate01" },
        "NetworkAclId" : { "Ref" : "NetworkAclPrivate" }
      }
    },
    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate02" },
        "NetworkAclId" : { "Ref" : "NetworkAclPrivate" }
      }
    },
    "QAInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "Database", "EFSMountTarget01", "EFSMountTarget02" ],
      "Properties" : {
        "ImageId"        : "ami-0ff8a91507f77f867",
        "InstanceType"   : { "Ref" : "QAType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags"           : [ {"Key" : "Name", "Value" : "QA-Build-Jump-ops"} ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum -y update\n",
          "yum clean all\n",
          "yum -y install httpd mysql php php-mysql git amazon-efs-utils nfs-utils\n",
          "mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ",
          { "Ref" : "EFS" },
          ".efs.us-east-1.amazonaws.com:/ /var/www/html/\n",
          "git clone https://github.com/danielmassey/onica-app /var/www/onica-app\n",
          "cp -r /var/www/onica-app/* /var/www/html/\n",
          "mv /var/www/html/wp-config-sample.php /var/www/html/wp-config.php\n",
          "chown -R apache:apache /var/www/html\n",
          "sed -i 's/database_name_here/",
          { "Ref" : "DBName" },
          "/g' /var/www/html/wp-config.php\n",
          "sed -i 's/database_username_here/",
          { "Ref" : "DBUser" },
          "/g' /var/www/html/wp-config.php\n",
          "sed -i 's/database_password_here/",
          { "Ref" : "DBPass" },
          "/g' /var/www/html/wp-config.php\n",
          "sed -i 's/database_host_here/",
          { "Fn::GetAtt" : [ "Database", "Endpoint.Address" ]},
          "/g' /var/www/html/wp-config.php\n",
          "/etc/init.d/httpd restart\n"
          ]]}},
          "NetworkInterfaces": [ {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [{ "Ref" : "QAInstanceSecurityGroup" }],
            "SubnetId": { "Ref" : "SubnetPublic01" }
          } ]
      }
    },
    "QAInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
         ]
      }
    },
  "PublicApplicationLoadBalancer" : {
    "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
    "Properties" : {
      "Subnets" : [ { "Ref" : "SubnetPublic01"}, { "Ref" : "SubnetPublic02" } ],
      "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ]
    }
  },

  "ALBListener" : {
    "Type" : "AWS::ElasticLoadBalancingV2::Listener",
    "Properties" : {
      "DefaultActions" : [{
        "Type" : "forward",
        "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
      }],
      "LoadBalancerArn" : { "Ref" : "PublicApplicationLoadBalancer" },
      "Port" : "80",
      "Protocol" : "HTTP"
    }
  },

  "ALBTargetGroup" : {
    "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties" : {
      "HealthCheckIntervalSeconds" : 90,
      "HealthCheckTimeoutSeconds" : 60,
      "HealthyThresholdCount" : 3,
      "Port" : 80,
      "Protocol" : "HTTP",
      "UnhealthyThresholdCount" : 5,
      "VpcId" : {"Ref" : "VPC"}
    }
  },

  "PublicLoadBalancerSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
      "VpcId" : { "Ref" : "VPC" },
      "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
      "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ]
    }
  },

  "WebServerFleet" : {
    "Type" : "AWS::AutoScaling::AutoScalingGroup",
    "DependsOn" : [ "RouteNAT01", "RouteNAT02" ],
    "Properties" : {
      "VPCZoneIdentifier" : [{ "Ref" : "SubnetPrivate01" }, { "Ref" : "SubnetPrivate02" }],
      "LaunchConfigurationName" : { "Ref" : "WebServerLaunchConfig"  },
      "MinSize" : "2",
      "MaxSize" : "10",
      "DesiredCapacity" : "2",
      "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
      "HealthCheckGracePeriod" : "120",
      "Tags" : [ { "Key" : "Name", "Value" : "webserver-ASG", "PropagateAtLaunch" : "true" } ]
    }
  },
  "ScaleUpPolicy" : {
     "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerFleet" },
        "Cooldown" : "180",
        "ScalingAdjustment" : "1"
     }
  },
  "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "EvaluationPeriods": "3",
        "Statistic": "Average",
        "Threshold": "80",
        "AlarmDescription": "Alarm if CPU too high",
        "Period": "60",
        "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
           "Name": "AutoScalingGroupName",
           "Value": { "Ref": "WebServerFleet" }
        } ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
     }
  },
  "ScaleDownPolicy" : {
     "Type" : "AWS::AutoScaling::ScalingPolicy",
     "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerFleet" },
        "Cooldown" : "180",
        "ScalingAdjustment" : "-1"
     }
  },
  "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "Threshold": "60",
        "AlarmDescription": "Alarm if CPU is low",
        "Period": "60",
        "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
           "Name": "AutoScalingGroupName",
           "Value": { "Ref": "WebServerFleet" }
        } ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
     }
  },
  "WebServerLaunchConfig"  : {
    "Type" : "AWS::AutoScaling::LaunchConfiguration",
    "DependsOn" : [ "Database", "EFSMountTarget01", "EFSMountTarget02" ],
    "Properties" : {
      "ImageId"        : "ami-0ff8a91507f77f867",
      "SecurityGroups" : [ { "Ref" : "WebServerSecurityGroup" } ],
      "InstanceType"   : { "Ref" : "WebServerInstanceType" },
      "KeyName"        : { "Ref" : "KeyName" },
      "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
        "#!/bin/bash -xe\n",
        "yum -y update\n",
        "yum clean all\n",
        "yum -y install httpd mysql php php-mysql git amazon-efs-utils nfs-utils\n",
        "mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ",
        { "Ref" : "EFS" },
        ".efs.us-east-1.amazonaws.com:/ /var/www/html/\n",
        "/etc/init.d/httpd restart\n"
        ]]}},
    }
  },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ,
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" } } ]
      }
    },
    "CloudfrontDistribution" : {
                "Type" : "AWS::CloudFront::Distribution",
                "DependsOn" : "PublicApplicationLoadBalancer",
                "Properties" : {
                    "DistributionConfig" : {
                        "Origins" : [ {
                            "DomainName" : { "Fn::GetAtt" : [ "PublicApplicationLoadBalancer", "DNSName" ]},
                            "Id" : "PublicApplicationLoadBalancer",
                            "CustomOriginConfig" : {
                                "OriginProtocolPolicy": "http-only"
                            }
                        }],
                        "Enabled" : "true",
                        "Comment" : "Onica cloudfront to LB",
                        "DefaultRootObject" : "index.php",
                        "DefaultCacheBehavior" : {
                            "TargetOriginId" : "PublicApplicationLoadBalancer",
                            "ForwardedValues" : {
                                "QueryString" : "false",
                                "Cookies" : { "Forward" : "none" }
                            },
                            "ViewerProtocolPolicy" : "allow-all"
                        },
                       "ViewerCertificate" : { "CloudFrontDefaultCertificate" : "true" }
                    }
                }
            },
            "DBSubnetGroup" : {
               "Type" : "AWS::RDS::DBSubnetGroup",
               "Properties" : {
                  "DBSubnetGroupDescription" : "onica",
                  "DBSubnetGroupName" : "onica",
                  "SubnetIds" : [ { "Ref" : "SubnetPrivate01" } , { "Ref" : "SubnetPrivate02" } ],
                  "Tags" : [ { "Key" : "Name", "Value" : "onica DB subnet group" } ]
               }
            },
            "DBInstanceSecurityGroup" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "GroupDescription" : "DB security group",
                "SecurityGroupIngress" : [
                  { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0"}
                 ]
              }
            },
            "Database" : {
               "Type" : "AWS::RDS::DBInstance",
               "Properties" : {
                  "DBName" : { "Ref" : "DBName" },
                  "AllocatedStorage" : "100",
                  "DBInstanceClass" : "db.t2.micro",
                  "Engine" : "MySQL",
                  "MasterUsername" : { "Ref" : "DBUser" },
                  "MasterUserPassword" : { "Ref" : "DBPass" },
                  "MultiAZ" : "true",
                  "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
                  "VPCSecurityGroups" : [ { "Ref" : "DBInstanceSecurityGroup" } ],
                  "Tags" : [ { "Key" : "Name", "Value" : "My SQL Database" } ]
               }
            },
            "EFSMountTarget01": {
              "Type": "AWS::EFS::MountTarget",
              "Properties": {
                "FileSystemId": { "Ref": "EFS" },
                "SubnetId": { "Ref": "SubnetPrivate01" },
                "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
              }
            },
            "EFSMountTarget02": {
              "Type": "AWS::EFS::MountTarget",
              "Properties": {
                "FileSystemId": { "Ref": "EFS" },
                "SubnetId": { "Ref": "SubnetPrivate02" },
                "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
              }
            },
            "EFSSecurityGroup" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "GroupDescription" : "Enable SSH access via port 22",
                "SecurityGroupIngress" : [
                  { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0"}
                 ]
              }
            },
            "EFS" : {
              "Type" : "AWS::EFS::FileSystem",
              "Properties": {
                              "Encrypted": false,
                          }
              },
              "AlarmNotificationTopic": {
                    "Type": "AWS::SNS::Topic",
                    "Properties": {
                        "Subscription": [
                            {
                                "Endpoint": { "Ref": "Email" },
                                "Protocol": "email"
                            }
                        ]
                    }
                },
              "LoadBalancerNoInstance": {
                 "Type": "AWS::CloudWatch::Alarm",
                 "Properties": {
                    "EvaluationPeriods": "1",
                    "Statistic": "SampleCount",
                    "Threshold": "1",
                    "TreatMissingData": "notBreaching",
                    "AlarmDescription": "Alarm no instances in LoadBalancer",
                    "Period": "300",
                    "AlarmActions": [ { "Ref": "AlarmNotificationTopic" } ],
                    "Namespace": "AWS/ApplicationELB",
                    "Dimensions": [ {
                       "Name": "LoadBalancer",
                       "Value": { "Fn::GetAtt" : [ "PublicApplicationLoadBalancer", "LoadBalancerFullName" ]}
                    } ],
                    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                    "MetricName": "HTTPCode_ELB_5XX_Count"
                 }
              }

 },
  "Outputs" : {
    "LoadBalancerURL" : {
      "Description" : "LoadBalancer URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "PublicApplicationLoadBalancer", "DNSName" ]}]]}
    },
    "CloudFrontURL" : {
      "Description" : "CloudFront URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "CloudfrontDistribution", "DomainName" ]}]]}
    },
    "DatabaseURL" : {
      "Description" : "CloudFront URL",
      "Value" :  { "Fn::Join" : [ "", [ "", { "Fn::GetAtt" : [ "Database", "Endpoint.Address" ]}]]}
    }
  }
}
